[{"C:\\Users\\filwy\\Desktop\\SolveBot_interview\\tasks_app\\src\\App.js":"1","C:\\Users\\filwy\\Desktop\\SolveBot_interview\\tasks_app\\src\\index.js":"2","C:\\Users\\filwy\\Desktop\\SolveBot_interview\\tasks_app\\src\\components\\Task.js":"3"},{"size":3163,"mtime":1611142797150,"results":"4","hashOfConfig":"5"},{"size":154,"mtime":1611082956378,"results":"6","hashOfConfig":"5"},{"size":329,"mtime":1611139310049,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"k5yjdi",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\filwy\\Desktop\\SolveBot_interview\\tasks_app\\src\\App.js",["15","16","17","18"],"import \"./App.css\";\nimport { useState, useEffect} from \"react\";\nimport Task from './components/Task';\n\n\nfunction App() {\n  const [inputValue, setInpuValue] = useState(\"\");\n  const [todoTasks, setTodoTasks] = useState(() => { \n    const localData = localStorage.getItem('todoTasks');\n    return localData ? JSON.parse(localData) : [];\n  });\n  const [doneTasks, setDoneTasks] = useState(() => { \n    const localData = localStorage.getItem('doneTasks');\n    return localData ? JSON.parse(localData) : [];\n  });\n  const [isDone, setIsDone] = useState(false);\n  let randomId = Math.random() * 1000;\n\n  //handle input text\n  //assign text to variable\n  const handleInput = (e) => {\n    setInpuValue(e.target.value);\n    console.log(e.target.value);\n  };\n\n  //handle submit button\n  //on submit setup task to false and move to todoTasks array\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setTodoTasks([\n      ...todoTasks,\n      { text: inputValue, isDone: isDone, id: randomId },\n    ]);\n    setInpuValue(\"\");\n  };\n\n  //handle checkbox\n  //when checked change to true and move to doneTasks array\n  const handleCheck = e => {\n    setIsDone(todoTasks.map(todo => {\n      if(todo.id == e.target.id) {\n        todo.isDone = !todo.isDone;\n        if(todo.isDone){\n          setDoneTasks([\n            ...doneTasks, todo\n          ]);\n        }\n      }\n    }))\n  };\n\n  //handle taks from todoTasks array\n  //when isDone == true remove task from array\n  const handleDelete = () => {\n    todoTasks.map(todo => {\n      if(todo.isDone){\n        setTodoTasks(todoTasks.filter(el => el.id != todo.id));\n      } \n    })\n  }\n  handleDelete();\n\n  //set todoTasks into local storage\n  useEffect(() => {\n    localStorage.setItem('todoTasks', JSON.stringify(todoTasks))\n  }, [todoTasks]);\n\n   //set doneTasks into local storage\n  useEffect(() => {\n    localStorage.setItem('doneTasks', JSON.stringify(doneTasks))\n  }, [doneTasks]);\n\n  return (\n    <>\n    <div className=\"app\">\n      <h1>Lista zadań</h1>\n      <div className=\"listsWrapper\">\n        <div className=\"col-left\">\n          <h3>Do zrobienia ({todoTasks.length})</h3>\n          <ul>\n            {todoTasks.map((task) => (\n              <Task task={task} handleCheck={handleCheck} isDone={task.isDone}/>\n            ))}\n          </ul>\n        </div>\n        <div className=\"col-right\">\n          <h3>Zrobione ({doneTasks.length})</h3>\n          <ul>\n            {doneTasks.map((task) => (\n              <Task task={task} handleCheck={handleCheck} isDone={task.isDone}/>\n            ))}\n          </ul>\n        </div>\n      </div>\n      <div className=\"inputWrapper\">\n        <form>\n          <input\n            value={inputValue}\n            onChange={handleInput}\n            type=\"text\"\n            className=\"input\"\n          />\n          <button onClick={handleSubmit} type=\"submit\" className=\"button\">\n            Dodaj zadanie\n          </button>\n        </form>\n      </div>\n    </div>\n    <footer>\n        <p>© 2021 Filip Wydra</p>\n        <p><a href=\"https://github.com/villagef/tasks_app\"><i className=\"fab fa-github\"></i>Github source code</a></p>\n    </footer>\n    </>\n  );\n}\n\nexport default App;\n","C:\\Users\\filwy\\Desktop\\SolveBot_interview\\tasks_app\\src\\index.js",[],"C:\\Users\\filwy\\Desktop\\SolveBot_interview\\tasks_app\\src\\components\\Task.js",[],{"ruleId":"19","severity":1,"message":"20","line":40,"column":34,"nodeType":"21","messageId":"22","endLine":40,"endColumn":36},{"ruleId":"23","severity":1,"message":"24","line":41,"column":18,"nodeType":"25","messageId":"26","endLine":41,"endColumn":20},{"ruleId":"19","severity":1,"message":"20","line":55,"column":24,"nodeType":"21","messageId":"22","endLine":55,"endColumn":26},{"ruleId":"23","severity":1,"message":"27","line":57,"column":51,"nodeType":"25","messageId":"26","endLine":57,"endColumn":53},"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='."]